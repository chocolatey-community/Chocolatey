---
####################################################
#          ModuleBuilder Configuration             #
####################################################
BuiltModuleSubdirectory: module
CopyPaths:
  - en-US
  # - DscResources
  # - Modules
Encoding: UTF8
# Can be used to manually specify module's semantic version if the preferred method of
# using GitVersion is not available, and it is not possible to set the session environment
# variable `$env:ModuleVersion`, nor setting the variable `$ModuleVersion`, in the
# PowerShell session (parent scope) before running the task `build`.
#SemVer: '99.0.0-preview1'

VersionedOutputDirectory: true

####################################################
#      ModuleBuilder Submodules Configuration      #
####################################################

NestedModule:
    DscResource.Common:
      CopyOnly: true
      Path: ./output/RequiredModules/DscResource.Common
      AddToManifest: false
      Exclude: PSGetModuleInfo.xml

####################################################
#       Sampler Pipeline Configuration             #
####################################################
BuildWorkflow:
  '.':
    - build
    - test

  build:
    - Clean
    - Build_Module_ModuleBuilder
    - Build_NestedModules_ModuleBuilder
    - Create_changelog_release_output
    - Generate_Conceptual_Help
    - Generate_Wiki_Content

  pack:
    - build
    - package_module_nupkg
    - gcpol

  hqrmtest:
    # - Set_PSModulePath
    - Invoke_HQRM_Tests_Stop_On_Fail

  ipmopsdsc1: |
    {
      Import-Module -Name PSDesiredStateConfiguration -MaximumVersion 1.99 -Passthru
    }
  gcpol:
    - build_guestconfiguration_packages

  # Defining test task to be run when invoking `./build.ps1 -Tasks test`
  test:
    # - Set_PSModulePath
    - Pester_Tests_Stop_On_Fail
    # Use this task if pipeline uses code coverage and the module is using the
    # pattern of Public, Private, Enum, Classes.
    #- Convert_Pester_Coverage
    - Pester_if_Code_Coverage_Under_Threshold

  # Use this task when you have multiple parallel tests, which produce multiple
  # code coverage files and needs to get merged into one file.
  merge:
    - Merge_CodeCoverage_Files

  publish:
    - publish_module_to_gallery
    - Publish_Release_To_GitHub
    - Publish_GitHub_Wiki_Content
    # - Create_ChangeLog_GitHub_PR



SetPSModulePath:
  RemovePersonal: true
  RemoveProgramFiles: true
  RemoveWindows: false
  SetSystemDefault: false

####################################################
#       PESTER  Configuration                      #
####################################################

Pester:
  Configuration:
    Run:
      Path:
        - tests/QA
        - tests/Unit
    Output:
      Verbosity: Detailed
      StackTraceVerbosity: Full
      CIFormat: Auto
    CodeCoverage:
      CoveragePercentTarget: 10
      OutputPath: JaCoCo_Merge.xml
      OutputEncoding: ascii
      UseBreakpoints: false
    TestResult:
      OutputFormat: NUnitXML
      OutputEncoding: ascii
  # Sampler pipeline configuration

CodeCoverage:
  CodeCoverageMergedOutputFile: JaCoCo_coverage.xml
  CodeCoverageFilePattern: JaCoCo_Merge.xml

DscTest:
  Pester:
    Configuration:
      Filter:
        ExcludeTag:
          - "Common Tests - New Error-Level Script Analyzer Rules"
      Output:
        Verbosity: Detailed
  Script:
    ExcludeSourceFile:
      - output
      # Deprecated resources
    ExcludeModuleFile:
      - Modules/DscResource.Common
    MainGitBranch: main

# Import ModuleBuilder tasks from a specific PowerShell module using the build
# task's alias. Wildcard * can be used to specify all tasks that has a similar
# prefix and or suffix. The module contain the task must be added as a required
# module in the file RequiredModules.psd1.
ModuleBuildTasks:
  Sampler:
    - '*.build.Sampler.ib.tasks'
  Sampler.GitHubTasks:
    - '*.ib.tasks'
  DscResource.DocGenerator:
    - 'Task.*'
  DscResource.Test:
    - 'Task.*'

# Invoke-Build Header to be used to 'decorate' the terminal output of the tasks.
TaskHeader: |
  param ($Path)
  ""
  "=" * 79
  Write-Build Cyan "`t`t`t$($Task.Name.replace("_"," ").ToUpper())"
  Write-Build DarkGray  "$(Get-BuildSynopsis $Task)"
  "-" * 79
  Write-Build DarkGray "  $Path"
  Write-Build DarkGray "  $($Task.InvocationInfo.ScriptName):$($Task.InvocationInfo.ScriptLineNumber)"
  ""

GitHubConfig:
  GitHubFilesToAdd:
    - 'CHANGELOG.md'
  ReleaseAssets:
    - output/GCPackages/ChocolateyIsInstalled*.zip
    - output/GCPackages/DisableChocolateyCommunitySource*.zip
  GitHubConfigUserName: dscbot
  GitHubConfigUserEmail: dsccommunity@outlook.com
  UpdateChangelogOnPrerelease: false

####################################################
#      DscResource.DocGenerator Configuration      #
####################################################
DscResource.DocGenerator:
  Generate_Conceptual_Help:
    MarkdownCodeRegularExpression:
      - '\`(.+?)\`' # Match inline code-block
      - '\\(\\)' # Match escaped backslash
      - '\[[^\[]+\]\((.+?)\)' # Match markdown URL
      - '_(.+?)_' # Match Italic (underscore)
      - '\*\*(.+?)\*\*' # Match bold
      - '\*(.+?)\*' # Match Italic (asterisk)
